# Set the filepath for the baseline files generated by Enumerate Baseline.ps1
$path = "$PSScriptRoot\Output"

# Find any baseline files in the output directory (the filename will match the
# pattern 'baseline-yyyyMMdd-hhmmss'.
$FileNames = dir $Path | where {$_.Name -match "baseline-(\d){8}-(\d){6}\.txt"}

# Import the baseline files using -Raw to enable multi-line regex matching. Use
# the first filename (alphanumerically sorted) for the initial baseline.
$InitialBaseline = $FileNames[0].Name
$InitialBaselineContent = Get-Content -Path $path\$InitialBaseline -Raw
# Use the last filename (alphanumerically sorted) for the final baseline.
$FinalBaseline = $FileNames[$($FileNames.Count - 1)].Name
$FinalBaselineContent = Get-Content -Path $path\$FinalBaseline -Raw

# Set output file location and filename and create the file.  NOTE: This script 
# will create the output file in the same directory as the baseline files.
$outfile = "$path\baseline-comparison.txt"
New-Item -Path $outfile -ItemType File -Force

# Write a header to the output file noting the two filenames being compared.
$(
    echo "Comparing $InitialBaseline against $FinalBaseline."
    echo "============================="
    echo ""
    ) | out-file $outfile -Append

################################################################################
# Define the list of section headers.
$SectionHeaders = @(
    "System date and time"
    "Hostname"
    "Users and groups"
    "Logged on users"
    "Running processes"
    "Services and their states"
    "Network information"
    "Listening network sockets"
    "System configuration information"
    "Mapped drives"
    "Plug and play devices"
    "Shared resources"
    "Scheduled tasks"
    )

# Compare an individual section.  The section header is passed as a parameter.
function Compare-Section {
    param([string]$SectionHeader)
    
    # Define a regular expression that will match from the section header to the
    # end-of-section termination string.
    $regex = "($($SectionHeader):)[\S\s]*?(---END-OF-SECTION---)"
    
    # Import the initial baseline section for comparison.  Select the matched
    # text and split it back into an array of strings on the newline characters.
    $initial = $InitialBaselineContent | Select-String -Pattern $regex
    $initial = ($initial.Matches).Value -split "`n"

    # Import the final baseline section for comparison.  Select the matched
    # text and split it back into an array of strings on the newline characters.
    $final = $FinalBaselineContent | Select-String -Pattern $regex
    $final = ($final.Matches).Value -split "`n"

    # Compare the initial and final baseline sections.  Sort by SideIndicator.
    $diff = Compare-Object -ReferenceObject $initial -DifferenceObject $final |
        sort -Property SideIndicator

    # If there are no differences, note this in the output.  If there are 
    # changes, list each line removed from the initial baseline (if any) first,
    # then list each added line (if any).
    if ($diff -eq $null) {
        echo "No lines were modified in the section `"$($SectionHeader)`"."
        echo ""
    } else {
        $ChangeStatement = "The following line(s) were added to the section"
        # Lines which were removed from the initial baseline:
        $removed_objects = $diff | where {$_.SideIndicator -eq "<="}
            if ($removed_objects -ne $null) {
                echo "$($ChangeStatement) `"$($SectionHeader)`":"
                $removed_objects | ForEach-Object {
                    echo $($_.InputObject)
                    }
                echo ""
                }
        # Lines which were added to the initial baseline:
        $added_objects = $diff | where {$_.SideIndicator -eq "=>"}
            if ($added_objects -ne $null) {
                echo "$($ChangeStatement) `"$($SectionHeader)`":"
                $added_objects | ForEach-Object {
                    echo $($_.InputObject)
                    }
                echo ""
                }
        echo ""
        }
    }

################################################################################
# Compare each section from the list of section headers.
$SectionHeaders | ForEach-Object {
    Compare-Section $_ | Out-File $outfile -Append
    echo "-----" | Out-File $outfile -Append
    }

# Optional: Automatically open the output file.
notepad $outfile
